/*@ fixed */

#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Position_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Position_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Position_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Position_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Position_2eproto;
namespace Player {
class Axis;
struct AxisDefaultTypeInternal;
extern AxisDefaultTypeInternal _Axis_default_instance_;
class BroadCast;
struct BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class ControllerRotation;
struct ControllerRotationDefaultTypeInternal;
extern ControllerRotationDefaultTypeInternal _ControllerRotation_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class PlayerChat;
struct PlayerChatDefaultTypeInternal;
extern PlayerChatDefaultTypeInternal _PlayerChat_default_instance_;
class PlayerMovementInfo;
struct PlayerMovementInfoDefaultTypeInternal;
extern PlayerMovementInfoDefaultTypeInternal _PlayerMovementInfo_default_instance_;
class RayIntersect;
struct RayIntersectDefaultTypeInternal;
extern RayIntersectDefaultTypeInternal _RayIntersect_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Scale;
struct ScaleDefaultTypeInternal;
extern ScaleDefaultTypeInternal _Scale_default_instance_;
class SyncPlayerInfo;
struct SyncPlayerInfoDefaultTypeInternal;
extern SyncPlayerInfoDefaultTypeInternal _SyncPlayerInfo_default_instance_;
class SyncPlayerToken;
struct SyncPlayerTokenDefaultTypeInternal;
extern SyncPlayerTokenDefaultTypeInternal _SyncPlayerToken_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace Player
PROTOBUF_NAMESPACE_OPEN
template<> ::Player::Axis* Arena::CreateMaybeMessage<::Player::Axis>(Arena*);
template<> ::Player::BroadCast* Arena::CreateMaybeMessage<::Player::BroadCast>(Arena*);
template<> ::Player::ControllerRotation* Arena::CreateMaybeMessage<::Player::ControllerRotation>(Arena*);
template<> ::Player::Location* Arena::CreateMaybeMessage<::Player::Location>(Arena*);
template<> ::Player::PlayerChat* Arena::CreateMaybeMessage<::Player::PlayerChat>(Arena*);
template<> ::Player::PlayerMovementInfo* Arena::CreateMaybeMessage<::Player::PlayerMovementInfo>(Arena*);
template<> ::Player::RayIntersect* Arena::CreateMaybeMessage<::Player::RayIntersect>(Arena*);
template<> ::Player::Rotation* Arena::CreateMaybeMessage<::Player::Rotation>(Arena*);
template<> ::Player::Scale* Arena::CreateMaybeMessage<::Player::Scale>(Arena*);
template<> ::Player::SyncPlayerInfo* Arena::CreateMaybeMessage<::Player::SyncPlayerInfo>(Arena*);
template<> ::Player::SyncPlayerToken* Arena::CreateMaybeMessage<::Player::SyncPlayerToken>(Arena*);
template<> ::Player::Transform* Arena::CreateMaybeMessage<::Player::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Player {

// ===================================================================

class SyncPlayerToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.SyncPlayerToken) */ {
 public:
  inline SyncPlayerToken() : SyncPlayerToken(nullptr) {}
  ~SyncPlayerToken() override;
  explicit constexpr SyncPlayerToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerToken(const SyncPlayerToken& from);
  SyncPlayerToken(SyncPlayerToken&& from) noexcept
    : SyncPlayerToken() {
    *this = ::std::move(from);
  }

  inline SyncPlayerToken& operator=(const SyncPlayerToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerToken& operator=(SyncPlayerToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerToken* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerToken*>(
               &_SyncPlayerToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPlayerToken& a, SyncPlayerToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayerToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPlayerToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPlayerToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPlayerToken& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.SyncPlayerToken";
  }
  protected:
  explicit SyncPlayerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string Token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Player.SyncPlayerToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.SyncPlayerInfo) */ {
 public:
  inline SyncPlayerInfo() : SyncPlayerInfo(nullptr) {}
  ~SyncPlayerInfo() override;
  explicit constexpr SyncPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerInfo(const SyncPlayerInfo& from);
  SyncPlayerInfo(SyncPlayerInfo&& from) noexcept
    : SyncPlayerInfo() {
    *this = ::std::move(from);
  }

  inline SyncPlayerInfo& operator=(const SyncPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerInfo& operator=(SyncPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerInfo*>(
               &_SyncPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncPlayerInfo& a, SyncPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncPlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.SyncPlayerInfo";
  }
  protected:
  explicit SyncPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kTokenFieldNumber = 1,
    kPidFieldNumber = 2,
    kCharacterTypeFieldNumber = 4,
  };
  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Player.SyncPlayerToken Token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Player::SyncPlayerToken& token() const;
  PROTOBUF_NODISCARD ::Player::SyncPlayerToken* release_token();
  ::Player::SyncPlayerToken* mutable_token();
  void set_allocated_token(::Player::SyncPlayerToken* token);
  private:
  const ::Player::SyncPlayerToken& _internal_token() const;
  ::Player::SyncPlayerToken* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::Player::SyncPlayerToken* token);
  ::Player::SyncPlayerToken* unsafe_arena_release_token();

  // int32 Pid = 2;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 CharacterType = 4;
  void clear_charactertype();
  int32_t charactertype() const;
  void set_charactertype(int32_t value);
  private:
  int32_t _internal_charactertype() const;
  void _internal_set_charactertype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player.SyncPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Player::SyncPlayerToken* token_;
  int32_t pid_;
  int32_t charactertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class PlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.PlayerChat) */ {
 public:
  inline PlayerChat() : PlayerChat(nullptr) {}
  ~PlayerChat() override;
  explicit constexpr PlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerChat(const PlayerChat& from);
  PlayerChat(PlayerChat&& from) noexcept
    : PlayerChat() {
    *this = ::std::move(from);
  }

  inline PlayerChat& operator=(const PlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerChat& operator=(PlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerChat* internal_default_instance() {
    return reinterpret_cast<const PlayerChat*>(
               &_PlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerChat& a, PlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.PlayerChat";
  }
  protected:
  explicit PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 2,
    kChatFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // repeated int32 pid = 2;
  int pid_size() const;
  private:
  int _internal_pid_size() const;
  public:
  void clear_pid();
  private:
  int32_t _internal_pid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pid() const;
  void _internal_add_pid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pid();
  public:
  int32_t pid(int index) const;
  void set_pid(int index, int32_t value);
  void add_pid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pid();

  // string Chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player.PlayerChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pid_;
  mutable std::atomic<int> _pid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class RayIntersect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.RayIntersect) */ {
 public:
  inline RayIntersect() : RayIntersect(nullptr) {}
  ~RayIntersect() override;
  explicit constexpr RayIntersect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RayIntersect(const RayIntersect& from);
  RayIntersect(RayIntersect&& from) noexcept
    : RayIntersect() {
    *this = ::std::move(from);
  }

  inline RayIntersect& operator=(const RayIntersect& from) {
    CopyFrom(from);
    return *this;
  }
  inline RayIntersect& operator=(RayIntersect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RayIntersect& default_instance() {
    return *internal_default_instance();
  }
  static inline const RayIntersect* internal_default_instance() {
    return reinterpret_cast<const RayIntersect*>(
               &_RayIntersect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RayIntersect& a, RayIntersect& b) {
    a.Swap(&b);
  }
  inline void Swap(RayIntersect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RayIntersect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RayIntersect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RayIntersect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RayIntersect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RayIntersect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RayIntersect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.RayIntersect";
  }
  protected:
  explicit RayIntersect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorFieldNumber = 3,
    kOriginFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // string Actor = 3;
  void clear_actor();
  const std::string& actor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actor();
  PROTOBUF_NODISCARD std::string* release_actor();
  void set_allocated_actor(std::string* actor);
  private:
  const std::string& _internal_actor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor(const std::string& value);
  std::string* _internal_mutable_actor();
  public:

  // .Player.Location Origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::Player::Location& origin() const;
  PROTOBUF_NODISCARD ::Player::Location* release_origin();
  ::Player::Location* mutable_origin();
  void set_allocated_origin(::Player::Location* origin);
  private:
  const ::Player::Location& _internal_origin() const;
  ::Player::Location* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::Player::Location* origin);
  ::Player::Location* unsafe_arena_release_origin();

  // .Player.Location Direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Player::Location& direction() const;
  PROTOBUF_NODISCARD ::Player::Location* release_direction();
  ::Player::Location* mutable_direction();
  void set_allocated_direction(::Player::Location* direction);
  private:
  const ::Player::Location& _internal_direction() const;
  ::Player::Location* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Player::Location* direction);
  ::Player::Location* unsafe_arena_release_direction();

  // @@protoc_insertion_point(class_scope:Player.RayIntersect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_;
  ::Player::Location* origin_;
  ::Player::Location* direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Player.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit constexpr Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float Roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float Pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float Yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Player.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class Scale final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.Scale) */ {
 public:
  inline Scale() : Scale(nullptr) {}
  ~Scale() override;
  explicit constexpr Scale(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scale(const Scale& from);
  Scale(Scale&& from) noexcept
    : Scale() {
    *this = ::std::move(from);
  }

  inline Scale& operator=(const Scale& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scale& operator=(Scale&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scale& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scale* internal_default_instance() {
    return reinterpret_cast<const Scale*>(
               &_Scale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scale& a, Scale& b) {
    a.Swap(&b);
  }
  inline void Swap(Scale* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scale>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scale& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Scale& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scale* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.Scale";
  }
  protected:
  explicit Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Player.Scale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class ControllerRotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.ControllerRotation) */ {
 public:
  inline ControllerRotation() : ControllerRotation(nullptr) {}
  ~ControllerRotation() override;
  explicit constexpr ControllerRotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerRotation(const ControllerRotation& from);
  ControllerRotation(ControllerRotation&& from) noexcept
    : ControllerRotation() {
    *this = ::std::move(from);
  }

  inline ControllerRotation& operator=(const ControllerRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerRotation& operator=(ControllerRotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerRotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerRotation* internal_default_instance() {
    return reinterpret_cast<const ControllerRotation*>(
               &_ControllerRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ControllerRotation& a, ControllerRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerRotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerRotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerRotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerRotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControllerRotation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerRotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.ControllerRotation";
  }
  protected:
  explicit ControllerRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float Roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float Pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float Yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Player.ControllerRotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transform& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kRFieldNumber = 2,
    kSFieldNumber = 3,
  };
  // .Player.Location L = 1;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  const ::Player::Location& l() const;
  PROTOBUF_NODISCARD ::Player::Location* release_l();
  ::Player::Location* mutable_l();
  void set_allocated_l(::Player::Location* l);
  private:
  const ::Player::Location& _internal_l() const;
  ::Player::Location* _internal_mutable_l();
  public:
  void unsafe_arena_set_allocated_l(
      ::Player::Location* l);
  ::Player::Location* unsafe_arena_release_l();

  // .Player.Rotation R = 2;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  const ::Player::Rotation& r() const;
  PROTOBUF_NODISCARD ::Player::Rotation* release_r();
  ::Player::Rotation* mutable_r();
  void set_allocated_r(::Player::Rotation* r);
  private:
  const ::Player::Rotation& _internal_r() const;
  ::Player::Rotation* _internal_mutable_r();
  public:
  void unsafe_arena_set_allocated_r(
      ::Player::Rotation* r);
  ::Player::Rotation* unsafe_arena_release_r();

  // .Player.Scale S = 3;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const ::Player::Scale& s() const;
  PROTOBUF_NODISCARD ::Player::Scale* release_s();
  ::Player::Scale* mutable_s();
  void set_allocated_s(::Player::Scale* s);
  private:
  const ::Player::Scale& _internal_s() const;
  ::Player::Scale* _internal_mutable_s();
  public:
  void unsafe_arena_set_allocated_s(
      ::Player::Scale* s);
  ::Player::Scale* unsafe_arena_release_s();

  // @@protoc_insertion_point(class_scope:Player.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Player::Location* l_;
  ::Player::Rotation* r_;
  ::Player::Scale* s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class Axis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.Axis) */ {
 public:
  inline Axis() : Axis(nullptr) {}
  ~Axis() override;
  explicit constexpr Axis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Axis(const Axis& from);
  Axis(Axis&& from) noexcept
    : Axis() {
    *this = ::std::move(from);
  }

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Axis& operator=(Axis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Axis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Axis* internal_default_instance() {
    return reinterpret_cast<const Axis*>(
               &_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Axis& a, Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(Axis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Axis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Axis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Axis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Axis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.Axis";
  }
  protected:
  explicit Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveForwardFieldNumber = 1,
    kMoveRightFieldNumber = 2,
  };
  // float MoveForward = 1;
  void clear_moveforward();
  float moveforward() const;
  void set_moveforward(float value);
  private:
  float _internal_moveforward() const;
  void _internal_set_moveforward(float value);
  public:

  // float MoveRight = 2;
  void clear_moveright();
  float moveright() const;
  void set_moveright(float value);
  private:
  float _internal_moveright() const;
  void _internal_set_moveright(float value);
  public:

  // @@protoc_insertion_point(class_scope:Player.Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float moveforward_;
  float moveright_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class PlayerMovementInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.PlayerMovementInfo) */ {
 public:
  inline PlayerMovementInfo() : PlayerMovementInfo(nullptr) {}
  ~PlayerMovementInfo() override;
  explicit constexpr PlayerMovementInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMovementInfo(const PlayerMovementInfo& from);
  PlayerMovementInfo(PlayerMovementInfo&& from) noexcept
    : PlayerMovementInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMovementInfo& operator=(const PlayerMovementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMovementInfo& operator=(PlayerMovementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMovementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMovementInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMovementInfo*>(
               &_PlayerMovementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerMovementInfo& a, PlayerMovementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMovementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMovementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMovementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerMovementInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMovementInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerMovementInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMovementInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.PlayerMovementInfo";
  }
  protected:
  explicit PlayerMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputAxisFieldNumber = 1,
    kTransFieldNumber = 2,
    kCRotationFieldNumber = 3,
  };
  // .Player.Axis InputAxis = 1;
  bool has_inputaxis() const;
  private:
  bool _internal_has_inputaxis() const;
  public:
  void clear_inputaxis();
  const ::Player::Axis& inputaxis() const;
  PROTOBUF_NODISCARD ::Player::Axis* release_inputaxis();
  ::Player::Axis* mutable_inputaxis();
  void set_allocated_inputaxis(::Player::Axis* inputaxis);
  private:
  const ::Player::Axis& _internal_inputaxis() const;
  ::Player::Axis* _internal_mutable_inputaxis();
  public:
  void unsafe_arena_set_allocated_inputaxis(
      ::Player::Axis* inputaxis);
  ::Player::Axis* unsafe_arena_release_inputaxis();

  // .Player.Transform Trans = 2;
  bool has_trans() const;
  private:
  bool _internal_has_trans() const;
  public:
  void clear_trans();
  const ::Player::Transform& trans() const;
  PROTOBUF_NODISCARD ::Player::Transform* release_trans();
  ::Player::Transform* mutable_trans();
  void set_allocated_trans(::Player::Transform* trans);
  private:
  const ::Player::Transform& _internal_trans() const;
  ::Player::Transform* _internal_mutable_trans();
  public:
  void unsafe_arena_set_allocated_trans(
      ::Player::Transform* trans);
  ::Player::Transform* unsafe_arena_release_trans();

  // .Player.ControllerRotation CRotation = 3;
  bool has_crotation() const;
  private:
  bool _internal_has_crotation() const;
  public:
  void clear_crotation();
  const ::Player::ControllerRotation& crotation() const;
  PROTOBUF_NODISCARD ::Player::ControllerRotation* release_crotation();
  ::Player::ControllerRotation* mutable_crotation();
  void set_allocated_crotation(::Player::ControllerRotation* crotation);
  private:
  const ::Player::ControllerRotation& _internal_crotation() const;
  ::Player::ControllerRotation* _internal_mutable_crotation();
  public:
  void unsafe_arena_set_allocated_crotation(
      ::Player::ControllerRotation* crotation);
  ::Player::ControllerRotation* unsafe_arena_release_crotation();

  // @@protoc_insertion_point(class_scope:Player.PlayerMovementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Player::Axis* inputaxis_;
  ::Player::Transform* trans_;
  ::Player::ControllerRotation* crotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// -------------------------------------------------------------------

class BroadCast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player.BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {}
  ~BroadCast() override;
  explicit constexpr BroadCast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadCast(const BroadCast& from);
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadCast& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadCast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadCast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadCast& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player.BroadCast";
  }
  protected:
  explicit BroadCast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kInfoFieldNumber = 3,
    kContentFieldNumber = 2,
    kActionDataFieldNumber = 4,
  };
  // .Player.SyncPlayerInfo Token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::Player::SyncPlayerInfo& token() const;
  PROTOBUF_NODISCARD ::Player::SyncPlayerInfo* release_token();
  ::Player::SyncPlayerInfo* mutable_token();
  void set_allocated_token(::Player::SyncPlayerInfo* token);
  private:
  const ::Player::SyncPlayerInfo& _internal_token() const;
  ::Player::SyncPlayerInfo* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::Player::SyncPlayerInfo* token);
  ::Player::SyncPlayerInfo* unsafe_arena_release_token();

  // .Player.PlayerMovementInfo Info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Player::PlayerMovementInfo& info() const;
  PROTOBUF_NODISCARD ::Player::PlayerMovementInfo* release_info();
  ::Player::PlayerMovementInfo* mutable_info();
  void set_allocated_info(::Player::PlayerMovementInfo* info);
  private:
  const ::Player::PlayerMovementInfo& _internal_info() const;
  ::Player::PlayerMovementInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Player::PlayerMovementInfo* info);
  ::Player::PlayerMovementInfo* unsafe_arena_release_info();

  // int32 Content = 2;
  void clear_content();
  int32_t content() const;
  void set_content(int32_t value);
  private:
  int32_t _internal_content() const;
  void _internal_set_content(int32_t value);
  public:

  // int32 ActionData = 4;
  void clear_actiondata();
  int32_t actiondata() const;
  void set_actiondata(int32_t value);
  private:
  int32_t _internal_actiondata() const;
  void _internal_set_actiondata(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player.BroadCast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Player::SyncPlayerInfo* token_;
  ::Player::PlayerMovementInfo* info_;
  int32_t content_;
  int32_t actiondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Position_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPlayerToken

// string Token = 1;
inline void SyncPlayerToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SyncPlayerToken::token() const {
  // @@protoc_insertion_point(field_get:Player.SyncPlayerToken.Token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerToken::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Player.SyncPlayerToken.Token)
}
inline std::string* SyncPlayerToken::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Player.SyncPlayerToken.Token)
  return _s;
}
inline const std::string& SyncPlayerToken::_internal_token() const {
  return token_.Get();
}
inline void SyncPlayerToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerToken::release_token() {
  // @@protoc_insertion_point(field_release:Player.SyncPlayerToken.Token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Player.SyncPlayerToken.Token)
}

// -------------------------------------------------------------------

// SyncPlayerInfo

// .Player.SyncPlayerToken Token = 1;
inline bool SyncPlayerInfo::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool SyncPlayerInfo::has_token() const {
  return _internal_has_token();
}
inline void SyncPlayerInfo::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::Player::SyncPlayerToken& SyncPlayerInfo::_internal_token() const {
  const ::Player::SyncPlayerToken* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::SyncPlayerToken&>(
      ::Player::_SyncPlayerToken_default_instance_);
}
inline const ::Player::SyncPlayerToken& SyncPlayerInfo::token() const {
  // @@protoc_insertion_point(field_get:Player.SyncPlayerInfo.Token)
  return _internal_token();
}
inline void SyncPlayerInfo::unsafe_arena_set_allocated_token(
    ::Player::SyncPlayerToken* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.SyncPlayerInfo.Token)
}
inline ::Player::SyncPlayerToken* SyncPlayerInfo::release_token() {
  
  ::Player::SyncPlayerToken* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::SyncPlayerToken* SyncPlayerInfo::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:Player.SyncPlayerInfo.Token)
  
  ::Player::SyncPlayerToken* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Player::SyncPlayerToken* SyncPlayerInfo::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::SyncPlayerToken>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::Player::SyncPlayerToken* SyncPlayerInfo::mutable_token() {
  ::Player::SyncPlayerToken* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Player.SyncPlayerInfo.Token)
  return _msg;
}
inline void SyncPlayerInfo::set_allocated_token(::Player::SyncPlayerToken* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::SyncPlayerToken>::GetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Player.SyncPlayerInfo.Token)
}

// int32 Pid = 2;
inline void SyncPlayerInfo::clear_pid() {
  pid_ = 0;
}
inline int32_t SyncPlayerInfo::_internal_pid() const {
  return pid_;
}
inline int32_t SyncPlayerInfo::pid() const {
  // @@protoc_insertion_point(field_get:Player.SyncPlayerInfo.Pid)
  return _internal_pid();
}
inline void SyncPlayerInfo::_internal_set_pid(int32_t value) {
  
  pid_ = value;
}
inline void SyncPlayerInfo::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Player.SyncPlayerInfo.Pid)
}

// string Name = 3;
inline void SyncPlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SyncPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Player.SyncPlayerInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Player.SyncPlayerInfo.Name)
}
inline std::string* SyncPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Player.SyncPlayerInfo.Name)
  return _s;
}
inline const std::string& SyncPlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void SyncPlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Player.SyncPlayerInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Player.SyncPlayerInfo.Name)
}

// int32 CharacterType = 4;
inline void SyncPlayerInfo::clear_charactertype() {
  charactertype_ = 0;
}
inline int32_t SyncPlayerInfo::_internal_charactertype() const {
  return charactertype_;
}
inline int32_t SyncPlayerInfo::charactertype() const {
  // @@protoc_insertion_point(field_get:Player.SyncPlayerInfo.CharacterType)
  return _internal_charactertype();
}
inline void SyncPlayerInfo::_internal_set_charactertype(int32_t value) {
  
  charactertype_ = value;
}
inline void SyncPlayerInfo::set_charactertype(int32_t value) {
  _internal_set_charactertype(value);
  // @@protoc_insertion_point(field_set:Player.SyncPlayerInfo.CharacterType)
}

// -------------------------------------------------------------------

// PlayerChat

// int32 type = 1;
inline void PlayerChat::clear_type() {
  type_ = 0;
}
inline int32_t PlayerChat::_internal_type() const {
  return type_;
}
inline int32_t PlayerChat::type() const {
  // @@protoc_insertion_point(field_get:Player.PlayerChat.type)
  return _internal_type();
}
inline void PlayerChat::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void PlayerChat::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Player.PlayerChat.type)
}

// repeated int32 pid = 2;
inline int PlayerChat::_internal_pid_size() const {
  return pid_.size();
}
inline int PlayerChat::pid_size() const {
  return _internal_pid_size();
}
inline void PlayerChat::clear_pid() {
  pid_.Clear();
}
inline int32_t PlayerChat::_internal_pid(int index) const {
  return pid_.Get(index);
}
inline int32_t PlayerChat::pid(int index) const {
  // @@protoc_insertion_point(field_get:Player.PlayerChat.pid)
  return _internal_pid(index);
}
inline void PlayerChat::set_pid(int index, int32_t value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Player.PlayerChat.pid)
}
inline void PlayerChat::_internal_add_pid(int32_t value) {
  pid_.Add(value);
}
inline void PlayerChat::add_pid(int32_t value) {
  _internal_add_pid(value);
  // @@protoc_insertion_point(field_add:Player.PlayerChat.pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerChat::_internal_pid() const {
  return pid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PlayerChat::pid() const {
  // @@protoc_insertion_point(field_list:Player.PlayerChat.pid)
  return _internal_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerChat::_internal_mutable_pid() {
  return &pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PlayerChat::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:Player.PlayerChat.pid)
  return _internal_mutable_pid();
}

// string Chat = 3;
inline void PlayerChat::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& PlayerChat::chat() const {
  // @@protoc_insertion_point(field_get:Player.PlayerChat.Chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerChat::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Player.PlayerChat.Chat)
}
inline std::string* PlayerChat::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Player.PlayerChat.Chat)
  return _s;
}
inline const std::string& PlayerChat::_internal_chat() const {
  return chat_.Get();
}
inline void PlayerChat::_internal_set_chat(const std::string& value) {
  
  chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerChat::_internal_mutable_chat() {
  
  return chat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerChat::release_chat() {
  // @@protoc_insertion_point(field_release:Player.PlayerChat.Chat)
  return chat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerChat::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Player.PlayerChat.Chat)
}

// -------------------------------------------------------------------

// RayIntersect

// .Player.Location Origin = 1;
inline bool RayIntersect::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool RayIntersect::has_origin() const {
  return _internal_has_origin();
}
inline void RayIntersect::clear_origin() {
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
inline const ::Player::Location& RayIntersect::_internal_origin() const {
  const ::Player::Location* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Location&>(
      ::Player::_Location_default_instance_);
}
inline const ::Player::Location& RayIntersect::origin() const {
  // @@protoc_insertion_point(field_get:Player.RayIntersect.Origin)
  return _internal_origin();
}
inline void RayIntersect::unsafe_arena_set_allocated_origin(
    ::Player::Location* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.RayIntersect.Origin)
}
inline ::Player::Location* RayIntersect::release_origin() {
  
  ::Player::Location* temp = origin_;
  origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Location* RayIntersect::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:Player.RayIntersect.Origin)
  
  ::Player::Location* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::Player::Location* RayIntersect::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Location>(GetArenaForAllocation());
    origin_ = p;
  }
  return origin_;
}
inline ::Player::Location* RayIntersect::mutable_origin() {
  ::Player::Location* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:Player.RayIntersect.Origin)
  return _msg;
}
inline void RayIntersect::set_allocated_origin(::Player::Location* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Location>::GetOwningArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:Player.RayIntersect.Origin)
}

// .Player.Location Direction = 2;
inline bool RayIntersect::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool RayIntersect::has_direction() const {
  return _internal_has_direction();
}
inline void RayIntersect::clear_direction() {
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::Player::Location& RayIntersect::_internal_direction() const {
  const ::Player::Location* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Location&>(
      ::Player::_Location_default_instance_);
}
inline const ::Player::Location& RayIntersect::direction() const {
  // @@protoc_insertion_point(field_get:Player.RayIntersect.Direction)
  return _internal_direction();
}
inline void RayIntersect::unsafe_arena_set_allocated_direction(
    ::Player::Location* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.RayIntersect.Direction)
}
inline ::Player::Location* RayIntersect::release_direction() {
  
  ::Player::Location* temp = direction_;
  direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Location* RayIntersect::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:Player.RayIntersect.Direction)
  
  ::Player::Location* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Player::Location* RayIntersect::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Location>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Player::Location* RayIntersect::mutable_direction() {
  ::Player::Location* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:Player.RayIntersect.Direction)
  return _msg;
}
inline void RayIntersect::set_allocated_direction(::Player::Location* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Location>::GetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Player.RayIntersect.Direction)
}

// string Actor = 3;
inline void RayIntersect::clear_actor() {
  actor_.ClearToEmpty();
}
inline const std::string& RayIntersect::actor() const {
  // @@protoc_insertion_point(field_get:Player.RayIntersect.Actor)
  return _internal_actor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RayIntersect::set_actor(ArgT0&& arg0, ArgT... args) {
 
 actor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Player.RayIntersect.Actor)
}
inline std::string* RayIntersect::mutable_actor() {
  std::string* _s = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:Player.RayIntersect.Actor)
  return _s;
}
inline const std::string& RayIntersect::_internal_actor() const {
  return actor_.Get();
}
inline void RayIntersect::_internal_set_actor(const std::string& value) {
  
  actor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RayIntersect::_internal_mutable_actor() {
  
  return actor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RayIntersect::release_actor() {
  // @@protoc_insertion_point(field_release:Player.RayIntersect.Actor)
  return actor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RayIntersect::set_allocated_actor(std::string* actor) {
  if (actor != nullptr) {
    
  } else {
    
  }
  actor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (actor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    actor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Player.RayIntersect.Actor)
}

// -------------------------------------------------------------------

// Location

// float X = 1;
inline void Location::clear_x() {
  x_ = 0;
}
inline float Location::_internal_x() const {
  return x_;
}
inline float Location::x() const {
  // @@protoc_insertion_point(field_get:Player.Location.X)
  return _internal_x();
}
inline void Location::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Player.Location.X)
}

// float Y = 2;
inline void Location::clear_y() {
  y_ = 0;
}
inline float Location::_internal_y() const {
  return y_;
}
inline float Location::y() const {
  // @@protoc_insertion_point(field_get:Player.Location.Y)
  return _internal_y();
}
inline void Location::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Player.Location.Y)
}

// float Z = 3;
inline void Location::clear_z() {
  z_ = 0;
}
inline float Location::_internal_z() const {
  return z_;
}
inline float Location::z() const {
  // @@protoc_insertion_point(field_get:Player.Location.Z)
  return _internal_z();
}
inline void Location::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Location::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Player.Location.Z)
}

// -------------------------------------------------------------------

// Rotation

// float Roll = 1;
inline void Rotation::clear_roll() {
  roll_ = 0;
}
inline float Rotation::_internal_roll() const {
  return roll_;
}
inline float Rotation::roll() const {
  // @@protoc_insertion_point(field_get:Player.Rotation.Roll)
  return _internal_roll();
}
inline void Rotation::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void Rotation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Player.Rotation.Roll)
}

// float Pitch = 2;
inline void Rotation::clear_pitch() {
  pitch_ = 0;
}
inline float Rotation::_internal_pitch() const {
  return pitch_;
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:Player.Rotation.Pitch)
  return _internal_pitch();
}
inline void Rotation::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Rotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Player.Rotation.Pitch)
}

// float Yaw = 3;
inline void Rotation::clear_yaw() {
  yaw_ = 0;
}
inline float Rotation::_internal_yaw() const {
  return yaw_;
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:Player.Rotation.Yaw)
  return _internal_yaw();
}
inline void Rotation::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void Rotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Player.Rotation.Yaw)
}

// -------------------------------------------------------------------

// Scale

// float X = 1;
inline void Scale::clear_x() {
  x_ = 0;
}
inline float Scale::_internal_x() const {
  return x_;
}
inline float Scale::x() const {
  // @@protoc_insertion_point(field_get:Player.Scale.X)
  return _internal_x();
}
inline void Scale::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Scale::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Player.Scale.X)
}

// float Y = 2;
inline void Scale::clear_y() {
  y_ = 0;
}
inline float Scale::_internal_y() const {
  return y_;
}
inline float Scale::y() const {
  // @@protoc_insertion_point(field_get:Player.Scale.Y)
  return _internal_y();
}
inline void Scale::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Scale::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Player.Scale.Y)
}

// float Z = 3;
inline void Scale::clear_z() {
  z_ = 0;
}
inline float Scale::_internal_z() const {
  return z_;
}
inline float Scale::z() const {
  // @@protoc_insertion_point(field_get:Player.Scale.Z)
  return _internal_z();
}
inline void Scale::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Scale::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Player.Scale.Z)
}

// -------------------------------------------------------------------

// ControllerRotation

// float Roll = 1;
inline void ControllerRotation::clear_roll() {
  roll_ = 0;
}
inline float ControllerRotation::_internal_roll() const {
  return roll_;
}
inline float ControllerRotation::roll() const {
  // @@protoc_insertion_point(field_get:Player.ControllerRotation.Roll)
  return _internal_roll();
}
inline void ControllerRotation::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void ControllerRotation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Player.ControllerRotation.Roll)
}

// float Pitch = 2;
inline void ControllerRotation::clear_pitch() {
  pitch_ = 0;
}
inline float ControllerRotation::_internal_pitch() const {
  return pitch_;
}
inline float ControllerRotation::pitch() const {
  // @@protoc_insertion_point(field_get:Player.ControllerRotation.Pitch)
  return _internal_pitch();
}
inline void ControllerRotation::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void ControllerRotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Player.ControllerRotation.Pitch)
}

// float Yaw = 3;
inline void ControllerRotation::clear_yaw() {
  yaw_ = 0;
}
inline float ControllerRotation::_internal_yaw() const {
  return yaw_;
}
inline float ControllerRotation::yaw() const {
  // @@protoc_insertion_point(field_get:Player.ControllerRotation.Yaw)
  return _internal_yaw();
}
inline void ControllerRotation::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void ControllerRotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Player.ControllerRotation.Yaw)
}

// -------------------------------------------------------------------

// Transform

// .Player.Location L = 1;
inline bool Transform::_internal_has_l() const {
  return this != internal_default_instance() && l_ != nullptr;
}
inline bool Transform::has_l() const {
  return _internal_has_l();
}
inline void Transform::clear_l() {
  if (GetArenaForAllocation() == nullptr && l_ != nullptr) {
    delete l_;
  }
  l_ = nullptr;
}
inline const ::Player::Location& Transform::_internal_l() const {
  const ::Player::Location* p = l_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Location&>(
      ::Player::_Location_default_instance_);
}
inline const ::Player::Location& Transform::l() const {
  // @@protoc_insertion_point(field_get:Player.Transform.L)
  return _internal_l();
}
inline void Transform::unsafe_arena_set_allocated_l(
    ::Player::Location* l) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(l_);
  }
  l_ = l;
  if (l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.Transform.L)
}
inline ::Player::Location* Transform::release_l() {
  
  ::Player::Location* temp = l_;
  l_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Location* Transform::unsafe_arena_release_l() {
  // @@protoc_insertion_point(field_release:Player.Transform.L)
  
  ::Player::Location* temp = l_;
  l_ = nullptr;
  return temp;
}
inline ::Player::Location* Transform::_internal_mutable_l() {
  
  if (l_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Location>(GetArenaForAllocation());
    l_ = p;
  }
  return l_;
}
inline ::Player::Location* Transform::mutable_l() {
  ::Player::Location* _msg = _internal_mutable_l();
  // @@protoc_insertion_point(field_mutable:Player.Transform.L)
  return _msg;
}
inline void Transform::set_allocated_l(::Player::Location* l) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete l_;
  }
  if (l) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Location>::GetOwningArena(l);
    if (message_arena != submessage_arena) {
      l = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, l, submessage_arena);
    }
    
  } else {
    
  }
  l_ = l;
  // @@protoc_insertion_point(field_set_allocated:Player.Transform.L)
}

// .Player.Rotation R = 2;
inline bool Transform::_internal_has_r() const {
  return this != internal_default_instance() && r_ != nullptr;
}
inline bool Transform::has_r() const {
  return _internal_has_r();
}
inline void Transform::clear_r() {
  if (GetArenaForAllocation() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
}
inline const ::Player::Rotation& Transform::_internal_r() const {
  const ::Player::Rotation* p = r_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Rotation&>(
      ::Player::_Rotation_default_instance_);
}
inline const ::Player::Rotation& Transform::r() const {
  // @@protoc_insertion_point(field_get:Player.Transform.R)
  return _internal_r();
}
inline void Transform::unsafe_arena_set_allocated_r(
    ::Player::Rotation* r) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(r_);
  }
  r_ = r;
  if (r) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.Transform.R)
}
inline ::Player::Rotation* Transform::release_r() {
  
  ::Player::Rotation* temp = r_;
  r_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Rotation* Transform::unsafe_arena_release_r() {
  // @@protoc_insertion_point(field_release:Player.Transform.R)
  
  ::Player::Rotation* temp = r_;
  r_ = nullptr;
  return temp;
}
inline ::Player::Rotation* Transform::_internal_mutable_r() {
  
  if (r_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Rotation>(GetArenaForAllocation());
    r_ = p;
  }
  return r_;
}
inline ::Player::Rotation* Transform::mutable_r() {
  ::Player::Rotation* _msg = _internal_mutable_r();
  // @@protoc_insertion_point(field_mutable:Player.Transform.R)
  return _msg;
}
inline void Transform::set_allocated_r(::Player::Rotation* r) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete r_;
  }
  if (r) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Rotation>::GetOwningArena(r);
    if (message_arena != submessage_arena) {
      r = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    
  } else {
    
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:Player.Transform.R)
}

// .Player.Scale S = 3;
inline bool Transform::_internal_has_s() const {
  return this != internal_default_instance() && s_ != nullptr;
}
inline bool Transform::has_s() const {
  return _internal_has_s();
}
inline void Transform::clear_s() {
  if (GetArenaForAllocation() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
}
inline const ::Player::Scale& Transform::_internal_s() const {
  const ::Player::Scale* p = s_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Scale&>(
      ::Player::_Scale_default_instance_);
}
inline const ::Player::Scale& Transform::s() const {
  // @@protoc_insertion_point(field_get:Player.Transform.S)
  return _internal_s();
}
inline void Transform::unsafe_arena_set_allocated_s(
    ::Player::Scale* s) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_);
  }
  s_ = s;
  if (s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.Transform.S)
}
inline ::Player::Scale* Transform::release_s() {
  
  ::Player::Scale* temp = s_;
  s_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Scale* Transform::unsafe_arena_release_s() {
  // @@protoc_insertion_point(field_release:Player.Transform.S)
  
  ::Player::Scale* temp = s_;
  s_ = nullptr;
  return temp;
}
inline ::Player::Scale* Transform::_internal_mutable_s() {
  
  if (s_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Scale>(GetArenaForAllocation());
    s_ = p;
  }
  return s_;
}
inline ::Player::Scale* Transform::mutable_s() {
  ::Player::Scale* _msg = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:Player.Transform.S)
  return _msg;
}
inline void Transform::set_allocated_s(::Player::Scale* s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete s_;
  }
  if (s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Scale>::GetOwningArena(s);
    if (message_arena != submessage_arena) {
      s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s, submessage_arena);
    }
    
  } else {
    
  }
  s_ = s;
  // @@protoc_insertion_point(field_set_allocated:Player.Transform.S)
}

// -------------------------------------------------------------------

// Axis

// float MoveForward = 1;
inline void Axis::clear_moveforward() {
  moveforward_ = 0;
}
inline float Axis::_internal_moveforward() const {
  return moveforward_;
}
inline float Axis::moveforward() const {
  // @@protoc_insertion_point(field_get:Player.Axis.MoveForward)
  return _internal_moveforward();
}
inline void Axis::_internal_set_moveforward(float value) {
  
  moveforward_ = value;
}
inline void Axis::set_moveforward(float value) {
  _internal_set_moveforward(value);
  // @@protoc_insertion_point(field_set:Player.Axis.MoveForward)
}

// float MoveRight = 2;
inline void Axis::clear_moveright() {
  moveright_ = 0;
}
inline float Axis::_internal_moveright() const {
  return moveright_;
}
inline float Axis::moveright() const {
  // @@protoc_insertion_point(field_get:Player.Axis.MoveRight)
  return _internal_moveright();
}
inline void Axis::_internal_set_moveright(float value) {
  
  moveright_ = value;
}
inline void Axis::set_moveright(float value) {
  _internal_set_moveright(value);
  // @@protoc_insertion_point(field_set:Player.Axis.MoveRight)
}

// -------------------------------------------------------------------

// PlayerMovementInfo

// .Player.Axis InputAxis = 1;
inline bool PlayerMovementInfo::_internal_has_inputaxis() const {
  return this != internal_default_instance() && inputaxis_ != nullptr;
}
inline bool PlayerMovementInfo::has_inputaxis() const {
  return _internal_has_inputaxis();
}
inline void PlayerMovementInfo::clear_inputaxis() {
  if (GetArenaForAllocation() == nullptr && inputaxis_ != nullptr) {
    delete inputaxis_;
  }
  inputaxis_ = nullptr;
}
inline const ::Player::Axis& PlayerMovementInfo::_internal_inputaxis() const {
  const ::Player::Axis* p = inputaxis_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Axis&>(
      ::Player::_Axis_default_instance_);
}
inline const ::Player::Axis& PlayerMovementInfo::inputaxis() const {
  // @@protoc_insertion_point(field_get:Player.PlayerMovementInfo.InputAxis)
  return _internal_inputaxis();
}
inline void PlayerMovementInfo::unsafe_arena_set_allocated_inputaxis(
    ::Player::Axis* inputaxis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputaxis_);
  }
  inputaxis_ = inputaxis;
  if (inputaxis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.PlayerMovementInfo.InputAxis)
}
inline ::Player::Axis* PlayerMovementInfo::release_inputaxis() {
  
  ::Player::Axis* temp = inputaxis_;
  inputaxis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Axis* PlayerMovementInfo::unsafe_arena_release_inputaxis() {
  // @@protoc_insertion_point(field_release:Player.PlayerMovementInfo.InputAxis)
  
  ::Player::Axis* temp = inputaxis_;
  inputaxis_ = nullptr;
  return temp;
}
inline ::Player::Axis* PlayerMovementInfo::_internal_mutable_inputaxis() {
  
  if (inputaxis_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Axis>(GetArenaForAllocation());
    inputaxis_ = p;
  }
  return inputaxis_;
}
inline ::Player::Axis* PlayerMovementInfo::mutable_inputaxis() {
  ::Player::Axis* _msg = _internal_mutable_inputaxis();
  // @@protoc_insertion_point(field_mutable:Player.PlayerMovementInfo.InputAxis)
  return _msg;
}
inline void PlayerMovementInfo::set_allocated_inputaxis(::Player::Axis* inputaxis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete inputaxis_;
  }
  if (inputaxis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Axis>::GetOwningArena(inputaxis);
    if (message_arena != submessage_arena) {
      inputaxis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputaxis, submessage_arena);
    }
    
  } else {
    
  }
  inputaxis_ = inputaxis;
  // @@protoc_insertion_point(field_set_allocated:Player.PlayerMovementInfo.InputAxis)
}

// .Player.Transform Trans = 2;
inline bool PlayerMovementInfo::_internal_has_trans() const {
  return this != internal_default_instance() && trans_ != nullptr;
}
inline bool PlayerMovementInfo::has_trans() const {
  return _internal_has_trans();
}
inline void PlayerMovementInfo::clear_trans() {
  if (GetArenaForAllocation() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
}
inline const ::Player::Transform& PlayerMovementInfo::_internal_trans() const {
  const ::Player::Transform* p = trans_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::Transform&>(
      ::Player::_Transform_default_instance_);
}
inline const ::Player::Transform& PlayerMovementInfo::trans() const {
  // @@protoc_insertion_point(field_get:Player.PlayerMovementInfo.Trans)
  return _internal_trans();
}
inline void PlayerMovementInfo::unsafe_arena_set_allocated_trans(
    ::Player::Transform* trans) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_);
  }
  trans_ = trans;
  if (trans) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.PlayerMovementInfo.Trans)
}
inline ::Player::Transform* PlayerMovementInfo::release_trans() {
  
  ::Player::Transform* temp = trans_;
  trans_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::Transform* PlayerMovementInfo::unsafe_arena_release_trans() {
  // @@protoc_insertion_point(field_release:Player.PlayerMovementInfo.Trans)
  
  ::Player::Transform* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::Player::Transform* PlayerMovementInfo::_internal_mutable_trans() {
  
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::Transform>(GetArenaForAllocation());
    trans_ = p;
  }
  return trans_;
}
inline ::Player::Transform* PlayerMovementInfo::mutable_trans() {
  ::Player::Transform* _msg = _internal_mutable_trans();
  // @@protoc_insertion_point(field_mutable:Player.PlayerMovementInfo.Trans)
  return _msg;
}
inline void PlayerMovementInfo::set_allocated_trans(::Player::Transform* trans) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::Transform>::GetOwningArena(trans);
    if (message_arena != submessage_arena) {
      trans = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    
  } else {
    
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:Player.PlayerMovementInfo.Trans)
}

// .Player.ControllerRotation CRotation = 3;
inline bool PlayerMovementInfo::_internal_has_crotation() const {
  return this != internal_default_instance() && crotation_ != nullptr;
}
inline bool PlayerMovementInfo::has_crotation() const {
  return _internal_has_crotation();
}
inline void PlayerMovementInfo::clear_crotation() {
  if (GetArenaForAllocation() == nullptr && crotation_ != nullptr) {
    delete crotation_;
  }
  crotation_ = nullptr;
}
inline const ::Player::ControllerRotation& PlayerMovementInfo::_internal_crotation() const {
  const ::Player::ControllerRotation* p = crotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::ControllerRotation&>(
      ::Player::_ControllerRotation_default_instance_);
}
inline const ::Player::ControllerRotation& PlayerMovementInfo::crotation() const {
  // @@protoc_insertion_point(field_get:Player.PlayerMovementInfo.CRotation)
  return _internal_crotation();
}
inline void PlayerMovementInfo::unsafe_arena_set_allocated_crotation(
    ::Player::ControllerRotation* crotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crotation_);
  }
  crotation_ = crotation;
  if (crotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.PlayerMovementInfo.CRotation)
}
inline ::Player::ControllerRotation* PlayerMovementInfo::release_crotation() {
  
  ::Player::ControllerRotation* temp = crotation_;
  crotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::ControllerRotation* PlayerMovementInfo::unsafe_arena_release_crotation() {
  // @@protoc_insertion_point(field_release:Player.PlayerMovementInfo.CRotation)
  
  ::Player::ControllerRotation* temp = crotation_;
  crotation_ = nullptr;
  return temp;
}
inline ::Player::ControllerRotation* PlayerMovementInfo::_internal_mutable_crotation() {
  
  if (crotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::ControllerRotation>(GetArenaForAllocation());
    crotation_ = p;
  }
  return crotation_;
}
inline ::Player::ControllerRotation* PlayerMovementInfo::mutable_crotation() {
  ::Player::ControllerRotation* _msg = _internal_mutable_crotation();
  // @@protoc_insertion_point(field_mutable:Player.PlayerMovementInfo.CRotation)
  return _msg;
}
inline void PlayerMovementInfo::set_allocated_crotation(::Player::ControllerRotation* crotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete crotation_;
  }
  if (crotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::ControllerRotation>::GetOwningArena(crotation);
    if (message_arena != submessage_arena) {
      crotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crotation, submessage_arena);
    }
    
  } else {
    
  }
  crotation_ = crotation;
  // @@protoc_insertion_point(field_set_allocated:Player.PlayerMovementInfo.CRotation)
}

// -------------------------------------------------------------------

// BroadCast

// .Player.SyncPlayerInfo Token = 1;
inline bool BroadCast::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool BroadCast::has_token() const {
  return _internal_has_token();
}
inline void BroadCast::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::Player::SyncPlayerInfo& BroadCast::_internal_token() const {
  const ::Player::SyncPlayerInfo* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::SyncPlayerInfo&>(
      ::Player::_SyncPlayerInfo_default_instance_);
}
inline const ::Player::SyncPlayerInfo& BroadCast::token() const {
  // @@protoc_insertion_point(field_get:Player.BroadCast.Token)
  return _internal_token();
}
inline void BroadCast::unsafe_arena_set_allocated_token(
    ::Player::SyncPlayerInfo* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.BroadCast.Token)
}
inline ::Player::SyncPlayerInfo* BroadCast::release_token() {
  
  ::Player::SyncPlayerInfo* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::SyncPlayerInfo* BroadCast::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:Player.BroadCast.Token)
  
  ::Player::SyncPlayerInfo* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::Player::SyncPlayerInfo* BroadCast::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::SyncPlayerInfo>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::Player::SyncPlayerInfo* BroadCast::mutable_token() {
  ::Player::SyncPlayerInfo* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Player.BroadCast.Token)
  return _msg;
}
inline void BroadCast::set_allocated_token(::Player::SyncPlayerInfo* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::SyncPlayerInfo>::GetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:Player.BroadCast.Token)
}

// int32 Content = 2;
inline void BroadCast::clear_content() {
  content_ = 0;
}
inline int32_t BroadCast::_internal_content() const {
  return content_;
}
inline int32_t BroadCast::content() const {
  // @@protoc_insertion_point(field_get:Player.BroadCast.Content)
  return _internal_content();
}
inline void BroadCast::_internal_set_content(int32_t value) {
  
  content_ = value;
}
inline void BroadCast::set_content(int32_t value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:Player.BroadCast.Content)
}

// .Player.PlayerMovementInfo Info = 3;
inline bool BroadCast::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool BroadCast::has_info() const {
  return _internal_has_info();
}
inline void BroadCast::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::Player::PlayerMovementInfo& BroadCast::_internal_info() const {
  const ::Player::PlayerMovementInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Player::PlayerMovementInfo&>(
      ::Player::_PlayerMovementInfo_default_instance_);
}
inline const ::Player::PlayerMovementInfo& BroadCast::info() const {
  // @@protoc_insertion_point(field_get:Player.BroadCast.Info)
  return _internal_info();
}
inline void BroadCast::unsafe_arena_set_allocated_info(
    ::Player::PlayerMovementInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Player.BroadCast.Info)
}
inline ::Player::PlayerMovementInfo* BroadCast::release_info() {
  
  ::Player::PlayerMovementInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Player::PlayerMovementInfo* BroadCast::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Player.BroadCast.Info)
  
  ::Player::PlayerMovementInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Player::PlayerMovementInfo* BroadCast::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Player::PlayerMovementInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::Player::PlayerMovementInfo* BroadCast::mutable_info() {
  ::Player::PlayerMovementInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Player.BroadCast.Info)
  return _msg;
}
inline void BroadCast::set_allocated_info(::Player::PlayerMovementInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Player::PlayerMovementInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Player.BroadCast.Info)
}

// int32 ActionData = 4;
inline void BroadCast::clear_actiondata() {
  actiondata_ = 0;
}
inline int32_t BroadCast::_internal_actiondata() const {
  return actiondata_;
}
inline int32_t BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:Player.BroadCast.ActionData)
  return _internal_actiondata();
}
inline void BroadCast::_internal_set_actiondata(int32_t value) {
  
  actiondata_ = value;
}
inline void BroadCast::set_actiondata(int32_t value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:Player.BroadCast.ActionData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Player

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Position_2eproto
