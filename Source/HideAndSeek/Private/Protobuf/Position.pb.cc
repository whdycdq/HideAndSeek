/*@ fixed */

#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Position.proto

#include "Position.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Player {
constexpr SyncPlayerToken::SyncPlayerToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SyncPlayerTokenDefaultTypeInternal {
  constexpr SyncPlayerTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerTokenDefaultTypeInternal() {}
  union {
    SyncPlayerToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerTokenDefaultTypeInternal _SyncPlayerToken_default_instance_;
constexpr SyncPlayerInfo::SyncPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(nullptr)
  , pid_(0)
  , charactertype_(0){}
struct SyncPlayerInfoDefaultTypeInternal {
  constexpr SyncPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerInfoDefaultTypeInternal() {}
  union {
    SyncPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerInfoDefaultTypeInternal _SyncPlayerInfo_default_instance_;
constexpr PlayerChat::PlayerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_()
  , _pid_cached_byte_size_(0)
  , chat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct PlayerChatDefaultTypeInternal {
  constexpr PlayerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerChatDefaultTypeInternal() {}
  union {
    PlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerChatDefaultTypeInternal _PlayerChat_default_instance_;
constexpr RayIntersect::RayIntersect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_(nullptr)
  , direction_(nullptr){}
struct RayIntersectDefaultTypeInternal {
  constexpr RayIntersectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RayIntersectDefaultTypeInternal() {}
  union {
    RayIntersect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RayIntersectDefaultTypeInternal _RayIntersect_default_instance_;
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr Rotation::Rotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct RotationDefaultTypeInternal {
  constexpr RotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RotationDefaultTypeInternal _Rotation_default_instance_;
constexpr Scale::Scale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct ScaleDefaultTypeInternal {
  constexpr ScaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScaleDefaultTypeInternal() {}
  union {
    Scale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScaleDefaultTypeInternal _Scale_default_instance_;
constexpr ControllerRotation::ControllerRotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct ControllerRotationDefaultTypeInternal {
  constexpr ControllerRotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerRotationDefaultTypeInternal() {}
  union {
    ControllerRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerRotationDefaultTypeInternal _ControllerRotation_default_instance_;
constexpr Transform::Transform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l_(nullptr)
  , r_(nullptr)
  , s_(nullptr){}
struct TransformDefaultTypeInternal {
  constexpr TransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
constexpr Axis::Axis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : moveforward_(0)
  , moveright_(0){}
struct AxisDefaultTypeInternal {
  constexpr AxisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AxisDefaultTypeInternal() {}
  union {
    Axis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AxisDefaultTypeInternal _Axis_default_instance_;
constexpr PlayerMovementInfo::PlayerMovementInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputaxis_(nullptr)
  , trans_(nullptr)
  , crotation_(nullptr){}
struct PlayerMovementInfoDefaultTypeInternal {
  constexpr PlayerMovementInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerMovementInfoDefaultTypeInternal() {}
  union {
    PlayerMovementInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerMovementInfoDefaultTypeInternal _PlayerMovementInfo_default_instance_;
constexpr BroadCast::BroadCast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(nullptr)
  , info_(nullptr)
  , content_(0)
  , actiondata_(0){}
struct BroadCastDefaultTypeInternal {
  constexpr BroadCastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadCastDefaultTypeInternal() {}
  union {
    BroadCast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadCastDefaultTypeInternal _BroadCast_default_instance_;
}  // namespace Player
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Position_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Position_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Position_2eproto = nullptr;

const uint32_t TableStruct_Position_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerToken, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerInfo, token_),
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::Player::SyncPlayerInfo, charactertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::PlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::PlayerChat, type_),
  PROTOBUF_FIELD_OFFSET(::Player::PlayerChat, pid_),
  PROTOBUF_FIELD_OFFSET(::Player::PlayerChat, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::RayIntersect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::RayIntersect, origin_),
  PROTOBUF_FIELD_OFFSET(::Player::RayIntersect, direction_),
  PROTOBUF_FIELD_OFFSET(::Player::RayIntersect, actor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::Location, x_),
  PROTOBUF_FIELD_OFFSET(::Player::Location, y_),
  PROTOBUF_FIELD_OFFSET(::Player::Location, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::Rotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::Rotation, roll_),
  PROTOBUF_FIELD_OFFSET(::Player::Rotation, pitch_),
  PROTOBUF_FIELD_OFFSET(::Player::Rotation, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::Scale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::Scale, x_),
  PROTOBUF_FIELD_OFFSET(::Player::Scale, y_),
  PROTOBUF_FIELD_OFFSET(::Player::Scale, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::ControllerRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::ControllerRotation, roll_),
  PROTOBUF_FIELD_OFFSET(::Player::ControllerRotation, pitch_),
  PROTOBUF_FIELD_OFFSET(::Player::ControllerRotation, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::Transform, l_),
  PROTOBUF_FIELD_OFFSET(::Player::Transform, r_),
  PROTOBUF_FIELD_OFFSET(::Player::Transform, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::Axis, moveforward_),
  PROTOBUF_FIELD_OFFSET(::Player::Axis, moveright_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::PlayerMovementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::PlayerMovementInfo, inputaxis_),
  PROTOBUF_FIELD_OFFSET(::Player::PlayerMovementInfo, trans_),
  PROTOBUF_FIELD_OFFSET(::Player::PlayerMovementInfo, crotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Player::BroadCast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Player::BroadCast, token_),
  PROTOBUF_FIELD_OFFSET(::Player::BroadCast, content_),
  PROTOBUF_FIELD_OFFSET(::Player::BroadCast, info_),
  PROTOBUF_FIELD_OFFSET(::Player::BroadCast, actiondata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Player::SyncPlayerToken)},
  { 7, -1, -1, sizeof(::Player::SyncPlayerInfo)},
  { 17, -1, -1, sizeof(::Player::PlayerChat)},
  { 26, -1, -1, sizeof(::Player::RayIntersect)},
  { 35, -1, -1, sizeof(::Player::Location)},
  { 44, -1, -1, sizeof(::Player::Rotation)},
  { 53, -1, -1, sizeof(::Player::Scale)},
  { 62, -1, -1, sizeof(::Player::ControllerRotation)},
  { 71, -1, -1, sizeof(::Player::Transform)},
  { 80, -1, -1, sizeof(::Player::Axis)},
  { 88, -1, -1, sizeof(::Player::PlayerMovementInfo)},
  { 97, -1, -1, sizeof(::Player::BroadCast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_SyncPlayerToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_SyncPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_PlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_RayIntersect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_Rotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_Scale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_ControllerRotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_Axis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_PlayerMovementInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Player::_BroadCast_default_instance_),
};

const char descriptor_table_protodef_Position_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Position.proto\022\006Player\" \n\017SyncPlayerTo"
  "ken\022\r\n\005Token\030\001 \001(\t\"j\n\016SyncPlayerInfo\022&\n\005"
  "Token\030\001 \001(\0132\027.Player.SyncPlayerToken\022\013\n\003"
  "Pid\030\002 \001(\005\022\014\n\004Name\030\003 \001(\t\022\025\n\rCharacterType"
  "\030\004 \001(\005\"5\n\nPlayerChat\022\014\n\004type\030\001 \001(\005\022\013\n\003pi"
  "d\030\002 \003(\005\022\014\n\004Chat\030\003 \001(\t\"d\n\014RayIntersect\022 \n"
  "\006Origin\030\001 \001(\0132\020.Player.Location\022#\n\tDirec"
  "tion\030\002 \001(\0132\020.Player.Location\022\r\n\005Actor\030\003 "
  "\001(\t\"+\n\010Location\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\t\n"
  "\001Z\030\003 \001(\002\"4\n\010Rotation\022\014\n\004Roll\030\001 \001(\002\022\r\n\005Pi"
  "tch\030\002 \001(\002\022\013\n\003Yaw\030\003 \001(\002\"(\n\005Scale\022\t\n\001X\030\001 \001"
  "(\002\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\">\n\022ControllerRo"
  "tation\022\014\n\004Roll\030\001 \001(\002\022\r\n\005Pitch\030\002 \001(\002\022\013\n\003Y"
  "aw\030\003 \001(\002\"_\n\tTransform\022\033\n\001L\030\001 \001(\0132\020.Playe"
  "r.Location\022\033\n\001R\030\002 \001(\0132\020.Player.Rotation\022"
  "\030\n\001S\030\003 \001(\0132\r.Player.Scale\".\n\004Axis\022\023\n\013Mov"
  "eForward\030\001 \001(\002\022\021\n\tMoveRight\030\002 \001(\002\"\206\001\n\022Pl"
  "ayerMovementInfo\022\037\n\tInputAxis\030\001 \001(\0132\014.Pl"
  "ayer.Axis\022 \n\005Trans\030\002 \001(\0132\021.Player.Transf"
  "orm\022-\n\tCRotation\030\003 \001(\0132\032.Player.Controll"
  "erRotation\"\201\001\n\tBroadCast\022%\n\005Token\030\001 \001(\0132"
  "\026.Player.SyncPlayerInfo\022\017\n\007Content\030\002 \001(\005"
  "\022(\n\004Info\030\003 \001(\0132\032.Player.PlayerMovementIn"
  "fo\022\022\n\nActionData\030\004 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Position_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Position_2eproto = {
  false, false, 950, descriptor_table_protodef_Position_2eproto, "Position.proto", 
  &descriptor_table_Position_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_Position_2eproto::offsets,
  file_level_metadata_Position_2eproto, file_level_enum_descriptors_Position_2eproto, file_level_service_descriptors_Position_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Position_2eproto_getter() {
  return &descriptor_table_Position_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Position_2eproto(&descriptor_table_Position_2eproto);
namespace Player {

// ===================================================================

class SyncPlayerToken::_Internal {
 public:
};

SyncPlayerToken::SyncPlayerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.SyncPlayerToken)
}
SyncPlayerToken::SyncPlayerToken(const SyncPlayerToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Player.SyncPlayerToken)
}

inline void SyncPlayerToken::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncPlayerToken::~SyncPlayerToken() {
  // @@protoc_insertion_point(destructor:Player.SyncPlayerToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SyncPlayerToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncPlayerToken::ArenaDtor(void* object) {
  SyncPlayerToken* _this = reinterpret_cast< SyncPlayerToken* >(object);
  (void)_this;
}
void SyncPlayerToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.SyncPlayerToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Player.SyncPlayerToken.Token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncPlayerToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.SyncPlayerToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Player.SyncPlayerToken.Token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.SyncPlayerToken)
  return target;
}

size_t SyncPlayerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.SyncPlayerToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncPlayerToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncPlayerToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncPlayerToken::GetClassData() const { return &_class_data_; }

void SyncPlayerToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncPlayerToken *>(to)->MergeFrom(
      static_cast<const SyncPlayerToken &>(from));
}


void SyncPlayerToken::MergeFrom(const SyncPlayerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.SyncPlayerToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncPlayerToken::CopyFrom(const SyncPlayerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.SyncPlayerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerToken::IsInitialized() const {
  return true;
}

void SyncPlayerToken::InternalSwap(SyncPlayerToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[0]);
}

// ===================================================================

class SyncPlayerInfo::_Internal {
 public:
  static const ::Player::SyncPlayerToken& token(const SyncPlayerInfo* msg);
};

const ::Player::SyncPlayerToken&
SyncPlayerInfo::_Internal::token(const SyncPlayerInfo* msg) {
  return *msg->token_;
}
SyncPlayerInfo::SyncPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.SyncPlayerInfo)
}
SyncPlayerInfo::SyncPlayerInfo(const SyncPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_token()) {
    token_ = new ::Player::SyncPlayerToken(*from.token_);
  } else {
    token_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&charactertype_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(charactertype_));
  // @@protoc_insertion_point(copy_constructor:Player.SyncPlayerInfo)
}

inline void SyncPlayerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&charactertype_) -
    reinterpret_cast<char*>(&token_)) + sizeof(charactertype_));
}

SyncPlayerInfo::~SyncPlayerInfo() {
  // @@protoc_insertion_point(destructor:Player.SyncPlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SyncPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_;
}

void SyncPlayerInfo::ArenaDtor(void* object) {
  SyncPlayerInfo* _this = reinterpret_cast< SyncPlayerInfo* >(object);
  (void)_this;
}
void SyncPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.SyncPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charactertype_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(charactertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Player.SyncPlayerToken Token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Player.SyncPlayerInfo.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CharacterType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          charactertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.SyncPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Player.SyncPlayerToken Token = 1;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::token(this), target, stream);
  }

  // int32 Pid = 2;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Player.SyncPlayerInfo.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 CharacterType = 4;
  if (this->_internal_charactertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_charactertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.SyncPlayerInfo)
  return target;
}

size_t SyncPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.SyncPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Player.SyncPlayerToken Token = 1;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // int32 Pid = 2;
  if (this->_internal_pid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  // int32 CharacterType = 4;
  if (this->_internal_charactertype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_charactertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncPlayerInfo::GetClassData() const { return &_class_data_; }

void SyncPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncPlayerInfo *>(to)->MergeFrom(
      static_cast<const SyncPlayerInfo &>(from));
}


void SyncPlayerInfo::MergeFrom(const SyncPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.SyncPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_token()) {
    _internal_mutable_token()->::Player::SyncPlayerToken::MergeFrom(from._internal_token());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_charactertype() != 0) {
    _internal_set_charactertype(from._internal_charactertype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncPlayerInfo::CopyFrom(const SyncPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.SyncPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerInfo::IsInitialized() const {
  return true;
}

void SyncPlayerInfo::InternalSwap(SyncPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerInfo, charactertype_)
      + sizeof(SyncPlayerInfo::charactertype_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerInfo, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[1]);
}

// ===================================================================

class PlayerChat::_Internal {
 public:
};

PlayerChat::PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pid_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.PlayerChat)
}
PlayerChat::PlayerChat(const PlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pid_(from.pid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    chat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Player.PlayerChat)
}

inline void PlayerChat::SharedCtor() {
chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

PlayerChat::~PlayerChat() {
  // @@protoc_insertion_point(destructor:Player.PlayerChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerChat::ArenaDtor(void* object) {
  PlayerChat* _this = reinterpret_cast< PlayerChat* >(object);
  (void)_this;
}
void PlayerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.PlayerChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.Clear();
  chat_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Player.PlayerChat.Chat"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.PlayerChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated int32 pid = 2;
  {
    int byte_size = _pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_pid(), byte_size, target);
    }
  }

  // string Chat = 3;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Player.PlayerChat.Chat");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.PlayerChat)
  return target;
}

size_t PlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.PlayerChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Chat = 3;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerChat::GetClassData() const { return &_class_data_; }

void PlayerChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerChat *>(to)->MergeFrom(
      static_cast<const PlayerChat &>(from));
}


void PlayerChat::MergeFrom(const PlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.PlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pid_.MergeFrom(from.pid_);
  if (!from._internal_chat().empty()) {
    _internal_set_chat(from._internal_chat());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerChat::CopyFrom(const PlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.PlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChat::IsInitialized() const {
  return true;
}

void PlayerChat::InternalSwap(PlayerChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pid_.InternalSwap(&other->pid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_, lhs_arena,
      &other->chat_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[2]);
}

// ===================================================================

class RayIntersect::_Internal {
 public:
  static const ::Player::Location& origin(const RayIntersect* msg);
  static const ::Player::Location& direction(const RayIntersect* msg);
};

const ::Player::Location&
RayIntersect::_Internal::origin(const RayIntersect* msg) {
  return *msg->origin_;
}
const ::Player::Location&
RayIntersect::_Internal::direction(const RayIntersect* msg) {
  return *msg->direction_;
}
RayIntersect::RayIntersect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.RayIntersect)
}
RayIntersect::RayIntersect(const RayIntersect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor().empty()) {
    actor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_origin()) {
    origin_ = new ::Player::Location(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_direction()) {
    direction_ = new ::Player::Location(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Player.RayIntersect)
}

inline void RayIntersect::SharedCtor() {
actor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(direction_));
}

RayIntersect::~RayIntersect() {
  // @@protoc_insertion_point(destructor:Player.RayIntersect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RayIntersect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete direction_;
}

void RayIntersect::ArenaDtor(void* object) {
  RayIntersect* _this = reinterpret_cast< RayIntersect* >(object);
  (void)_this;
}
void RayIntersect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RayIntersect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RayIntersect::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.RayIntersect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RayIntersect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Player.Location Origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.Location Direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Actor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_actor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Player.RayIntersect.Actor"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RayIntersect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.RayIntersect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Player.Location Origin = 1;
  if (this->_internal_has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // .Player.Location Direction = 2;
  if (this->_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  // string Actor = 3;
  if (!this->_internal_actor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor().data(), static_cast<int>(this->_internal_actor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Player.RayIntersect.Actor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_actor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.RayIntersect)
  return target;
}

size_t RayIntersect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.RayIntersect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Actor = 3;
  if (!this->_internal_actor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor());
  }

  // .Player.Location Origin = 1;
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .Player.Location Direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RayIntersect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RayIntersect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RayIntersect::GetClassData() const { return &_class_data_; }

void RayIntersect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RayIntersect *>(to)->MergeFrom(
      static_cast<const RayIntersect &>(from));
}


void RayIntersect::MergeFrom(const RayIntersect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.RayIntersect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actor().empty()) {
    _internal_set_actor(from._internal_actor());
  }
  if (from._internal_has_origin()) {
    _internal_mutable_origin()->::Player::Location::MergeFrom(from._internal_origin());
  }
  if (from._internal_has_direction()) {
    _internal_mutable_direction()->::Player::Location::MergeFrom(from._internal_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RayIntersect::CopyFrom(const RayIntersect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.RayIntersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayIntersect::IsInitialized() const {
  return true;
}

void RayIntersect::InternalSwap(RayIntersect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actor_, lhs_arena,
      &other->actor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RayIntersect, direction_)
      + sizeof(RayIntersect::direction_)
      - PROTOBUF_FIELD_OFFSET(RayIntersect, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RayIntersect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[3]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Player.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:Player.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, z_)
      + sizeof(Location::z_)
      - PROTOBUF_FIELD_OFFSET(Location, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[4]);
}

// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.Rotation)
}
Rotation::Rotation(const Rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:Player.Rotation)
}

inline void Rotation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:Player.Rotation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rotation::ArenaDtor(void* object) {
  Rotation* _this = reinterpret_cast< Rotation* >(object);
  (void)_this;
}
void Rotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.Rotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Rotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Rotation)
  return target;
}

size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.Rotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rotation::GetClassData() const { return &_class_data_; }

void Rotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rotation *>(to)->MergeFrom(
      static_cast<const Rotation &>(from));
}


void Rotation::MergeFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation::IsInitialized() const {
  return true;
}

void Rotation::InternalSwap(Rotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, yaw_)
      + sizeof(Rotation::yaw_)
      - PROTOBUF_FIELD_OFFSET(Rotation, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[5]);
}

// ===================================================================

class Scale::_Internal {
 public:
};

Scale::Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.Scale)
}
Scale::Scale(const Scale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Player.Scale)
}

inline void Scale::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Scale::~Scale() {
  // @@protoc_insertion_point(destructor:Player.Scale)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Scale::ArenaDtor(void* object) {
  Scale* _this = reinterpret_cast< Scale* >(object);
  (void)_this;
}
void Scale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scale::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.Scale)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scale::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Scale)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Scale)
  return target;
}

size_t Scale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.Scale)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scale::GetClassData() const { return &_class_data_; }

void Scale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Scale *>(to)->MergeFrom(
      static_cast<const Scale &>(from));
}


void Scale::MergeFrom(const Scale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.Scale)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scale::CopyFrom(const Scale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.Scale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scale::IsInitialized() const {
  return true;
}

void Scale::InternalSwap(Scale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scale, z_)
      + sizeof(Scale::z_)
      - PROTOBUF_FIELD_OFFSET(Scale, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scale::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[6]);
}

// ===================================================================

class ControllerRotation::_Internal {
 public:
};

ControllerRotation::ControllerRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.ControllerRotation)
}
ControllerRotation::ControllerRotation(const ControllerRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:Player.ControllerRotation)
}

inline void ControllerRotation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

ControllerRotation::~ControllerRotation() {
  // @@protoc_insertion_point(destructor:Player.ControllerRotation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControllerRotation::ArenaDtor(void* object) {
  ControllerRotation* _this = reinterpret_cast< ControllerRotation* >(object);
  (void)_this;
}
void ControllerRotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.ControllerRotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerRotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerRotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.ControllerRotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.ControllerRotation)
  return target;
}

size_t ControllerRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.ControllerRotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerRotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerRotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerRotation::GetClassData() const { return &_class_data_; }

void ControllerRotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerRotation *>(to)->MergeFrom(
      static_cast<const ControllerRotation &>(from));
}


void ControllerRotation::MergeFrom(const ControllerRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.ControllerRotation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerRotation::CopyFrom(const ControllerRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.ControllerRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerRotation::IsInitialized() const {
  return true;
}

void ControllerRotation::InternalSwap(ControllerRotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerRotation, yaw_)
      + sizeof(ControllerRotation::yaw_)
      - PROTOBUF_FIELD_OFFSET(ControllerRotation, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerRotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[7]);
}

// ===================================================================

class Transform::_Internal {
 public:
  static const ::Player::Location& l(const Transform* msg);
  static const ::Player::Rotation& r(const Transform* msg);
  static const ::Player::Scale& s(const Transform* msg);
};

const ::Player::Location&
Transform::_Internal::l(const Transform* msg) {
  return *msg->l_;
}
const ::Player::Rotation&
Transform::_Internal::r(const Transform* msg) {
  return *msg->r_;
}
const ::Player::Scale&
Transform::_Internal::s(const Transform* msg) {
  return *msg->s_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_l()) {
    l_ = new ::Player::Location(*from.l_);
  } else {
    l_ = nullptr;
  }
  if (from._internal_has_r()) {
    r_ = new ::Player::Rotation(*from.r_);
  } else {
    r_ = nullptr;
  }
  if (from._internal_has_s()) {
    s_ = new ::Player::Scale(*from.s_);
  } else {
    s_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Player.Transform)
}

inline void Transform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&l_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&l_)) + sizeof(s_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:Player.Transform)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete l_;
  if (this != internal_default_instance()) delete r_;
  if (this != internal_default_instance()) delete s_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && l_ != nullptr) {
    delete l_;
  }
  l_ = nullptr;
  if (GetArenaForAllocation() == nullptr && r_ != nullptr) {
    delete r_;
  }
  r_ = nullptr;
  if (GetArenaForAllocation() == nullptr && s_ != nullptr) {
    delete s_;
  }
  s_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Player.Location L = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_l(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.Rotation R = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_r(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.Scale S = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_s(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Player.Location L = 1;
  if (this->_internal_has_l()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::l(this), target, stream);
  }

  // .Player.Rotation R = 2;
  if (this->_internal_has_r()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::r(this), target, stream);
  }

  // .Player.Scale S = 3;
  if (this->_internal_has_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::s(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Player.Location L = 1;
  if (this->_internal_has_l()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *l_);
  }

  // .Player.Rotation R = 2;
  if (this->_internal_has_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *r_);
  }

  // .Player.Scale S = 3;
  if (this->_internal_has_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }

void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transform *>(to)->MergeFrom(
      static_cast<const Transform &>(from));
}


void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_l()) {
    _internal_mutable_l()->::Player::Location::MergeFrom(from._internal_l());
  }
  if (from._internal_has_r()) {
    _internal_mutable_r()->::Player::Rotation::MergeFrom(from._internal_r());
  }
  if (from._internal_has_s()) {
    _internal_mutable_s()->::Player::Scale::MergeFrom(from._internal_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, s_)
      + sizeof(Transform::s_)
      - PROTOBUF_FIELD_OFFSET(Transform, l_)>(
          reinterpret_cast<char*>(&l_),
          reinterpret_cast<char*>(&other->l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[8]);
}

// ===================================================================

class Axis::_Internal {
 public:
};

Axis::Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.Axis)
}
Axis::Axis(const Axis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&moveforward_, &from.moveforward_,
    static_cast<size_t>(reinterpret_cast<char*>(&moveright_) -
    reinterpret_cast<char*>(&moveforward_)) + sizeof(moveright_));
  // @@protoc_insertion_point(copy_constructor:Player.Axis)
}

inline void Axis::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&moveforward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moveright_) -
    reinterpret_cast<char*>(&moveforward_)) + sizeof(moveright_));
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:Player.Axis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Axis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Axis::ArenaDtor(void* object) {
  Axis* _this = reinterpret_cast< Axis* >(object);
  (void)_this;
}
void Axis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.Axis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&moveforward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moveright_) -
      reinterpret_cast<char*>(&moveforward_)) + sizeof(moveright_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Axis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float MoveForward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          moveforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float MoveRight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          moveright_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Axis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.Axis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float MoveForward = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveforward = this->_internal_moveforward();
  uint32_t raw_moveforward;
  memcpy(&raw_moveforward, &tmp_moveforward, sizeof(tmp_moveforward));
  if (raw_moveforward != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_moveforward(), target);
  }

  // float MoveRight = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveright = this->_internal_moveright();
  uint32_t raw_moveright;
  memcpy(&raw_moveright, &tmp_moveright, sizeof(tmp_moveright));
  if (raw_moveright != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_moveright(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.Axis)
  return target;
}

size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.Axis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float MoveForward = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveforward = this->_internal_moveforward();
  uint32_t raw_moveforward;
  memcpy(&raw_moveforward, &tmp_moveforward, sizeof(tmp_moveforward));
  if (raw_moveforward != 0) {
    total_size += 1 + 4;
  }

  // float MoveRight = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveright = this->_internal_moveright();
  uint32_t raw_moveright;
  memcpy(&raw_moveright, &tmp_moveright, sizeof(tmp_moveright));
  if (raw_moveright != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Axis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Axis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Axis::GetClassData() const { return &_class_data_; }

void Axis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Axis *>(to)->MergeFrom(
      static_cast<const Axis &>(from));
}


void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveforward = from._internal_moveforward();
  uint32_t raw_moveforward;
  memcpy(&raw_moveforward, &tmp_moveforward, sizeof(tmp_moveforward));
  if (raw_moveforward != 0) {
    _internal_set_moveforward(from._internal_moveforward());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moveright = from._internal_moveright();
  uint32_t raw_moveright;
  memcpy(&raw_moveright, &tmp_moveright, sizeof(tmp_moveright));
  if (raw_moveright != 0) {
    _internal_set_moveright(from._internal_moveright());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  return true;
}

void Axis::InternalSwap(Axis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Axis, moveright_)
      + sizeof(Axis::moveright_)
      - PROTOBUF_FIELD_OFFSET(Axis, moveforward_)>(
          reinterpret_cast<char*>(&moveforward_),
          reinterpret_cast<char*>(&other->moveforward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Axis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[9]);
}

// ===================================================================

class PlayerMovementInfo::_Internal {
 public:
  static const ::Player::Axis& inputaxis(const PlayerMovementInfo* msg);
  static const ::Player::Transform& trans(const PlayerMovementInfo* msg);
  static const ::Player::ControllerRotation& crotation(const PlayerMovementInfo* msg);
};

const ::Player::Axis&
PlayerMovementInfo::_Internal::inputaxis(const PlayerMovementInfo* msg) {
  return *msg->inputaxis_;
}
const ::Player::Transform&
PlayerMovementInfo::_Internal::trans(const PlayerMovementInfo* msg) {
  return *msg->trans_;
}
const ::Player::ControllerRotation&
PlayerMovementInfo::_Internal::crotation(const PlayerMovementInfo* msg) {
  return *msg->crotation_;
}
PlayerMovementInfo::PlayerMovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.PlayerMovementInfo)
}
PlayerMovementInfo::PlayerMovementInfo(const PlayerMovementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputaxis()) {
    inputaxis_ = new ::Player::Axis(*from.inputaxis_);
  } else {
    inputaxis_ = nullptr;
  }
  if (from._internal_has_trans()) {
    trans_ = new ::Player::Transform(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  if (from._internal_has_crotation()) {
    crotation_ = new ::Player::ControllerRotation(*from.crotation_);
  } else {
    crotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Player.PlayerMovementInfo)
}

inline void PlayerMovementInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputaxis_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crotation_) -
    reinterpret_cast<char*>(&inputaxis_)) + sizeof(crotation_));
}

PlayerMovementInfo::~PlayerMovementInfo() {
  // @@protoc_insertion_point(destructor:Player.PlayerMovementInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerMovementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inputaxis_;
  if (this != internal_default_instance()) delete trans_;
  if (this != internal_default_instance()) delete crotation_;
}

void PlayerMovementInfo::ArenaDtor(void* object) {
  PlayerMovementInfo* _this = reinterpret_cast< PlayerMovementInfo* >(object);
  (void)_this;
}
void PlayerMovementInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerMovementInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerMovementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.PlayerMovementInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && inputaxis_ != nullptr) {
    delete inputaxis_;
  }
  inputaxis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
  if (GetArenaForAllocation() == nullptr && crotation_ != nullptr) {
    delete crotation_;
  }
  crotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMovementInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Player.Axis InputAxis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputaxis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.Transform Trans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.ControllerRotation CRotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMovementInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.PlayerMovementInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Player.Axis InputAxis = 1;
  if (this->_internal_has_inputaxis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inputaxis(this), target, stream);
  }

  // .Player.Transform Trans = 2;
  if (this->_internal_has_trans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trans(this), target, stream);
  }

  // .Player.ControllerRotation CRotation = 3;
  if (this->_internal_has_crotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::crotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.PlayerMovementInfo)
  return target;
}

size_t PlayerMovementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.PlayerMovementInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Player.Axis InputAxis = 1;
  if (this->_internal_has_inputaxis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inputaxis_);
  }

  // .Player.Transform Trans = 2;
  if (this->_internal_has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_);
  }

  // .Player.ControllerRotation CRotation = 3;
  if (this->_internal_has_crotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMovementInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerMovementInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMovementInfo::GetClassData() const { return &_class_data_; }

void PlayerMovementInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerMovementInfo *>(to)->MergeFrom(
      static_cast<const PlayerMovementInfo &>(from));
}


void PlayerMovementInfo::MergeFrom(const PlayerMovementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.PlayerMovementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inputaxis()) {
    _internal_mutable_inputaxis()->::Player::Axis::MergeFrom(from._internal_inputaxis());
  }
  if (from._internal_has_trans()) {
    _internal_mutable_trans()->::Player::Transform::MergeFrom(from._internal_trans());
  }
  if (from._internal_has_crotation()) {
    _internal_mutable_crotation()->::Player::ControllerRotation::MergeFrom(from._internal_crotation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMovementInfo::CopyFrom(const PlayerMovementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.PlayerMovementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMovementInfo::IsInitialized() const {
  return true;
}

void PlayerMovementInfo::InternalSwap(PlayerMovementInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMovementInfo, crotation_)
      + sizeof(PlayerMovementInfo::crotation_)
      - PROTOBUF_FIELD_OFFSET(PlayerMovementInfo, inputaxis_)>(
          reinterpret_cast<char*>(&inputaxis_),
          reinterpret_cast<char*>(&other->inputaxis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMovementInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[10]);
}

// ===================================================================

class BroadCast::_Internal {
 public:
  static const ::Player::SyncPlayerInfo& token(const BroadCast* msg);
  static const ::Player::PlayerMovementInfo& info(const BroadCast* msg);
};

const ::Player::SyncPlayerInfo&
BroadCast::_Internal::token(const BroadCast* msg) {
  return *msg->token_;
}
const ::Player::PlayerMovementInfo&
BroadCast::_Internal::info(const BroadCast* msg) {
  return *msg->info_;
}
BroadCast::BroadCast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Player.BroadCast)
}
BroadCast::BroadCast(const BroadCast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token()) {
    token_ = new ::Player::SyncPlayerInfo(*from.token_);
  } else {
    token_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::Player::PlayerMovementInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&content_, &from.content_,
    static_cast<size_t>(reinterpret_cast<char*>(&actiondata_) -
    reinterpret_cast<char*>(&content_)) + sizeof(actiondata_));
  // @@protoc_insertion_point(copy_constructor:Player.BroadCast)
}

inline void BroadCast::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actiondata_) -
    reinterpret_cast<char*>(&token_)) + sizeof(actiondata_));
}

BroadCast::~BroadCast() {
  // @@protoc_insertion_point(destructor:Player.BroadCast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadCast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete token_;
  if (this != internal_default_instance()) delete info_;
}

void BroadCast::ArenaDtor(void* object) {
  BroadCast* _this = reinterpret_cast< BroadCast* >(object);
  (void)_this;
}
void BroadCast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadCast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadCast::Clear() {
// @@protoc_insertion_point(message_clear_start:Player.BroadCast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actiondata_) -
      reinterpret_cast<char*>(&content_)) + sizeof(actiondata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadCast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Player.SyncPlayerInfo Token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Player.PlayerMovementInfo Info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActionData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          actiondata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadCast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player.BroadCast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Player.SyncPlayerInfo Token = 1;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::token(this), target, stream);
  }

  // int32 Content = 2;
  if (this->_internal_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_content(), target);
  }

  // .Player.PlayerMovementInfo Info = 3;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  // int32 ActionData = 4;
  if (this->_internal_actiondata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_actiondata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player.BroadCast)
  return target;
}

size_t BroadCast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Player.BroadCast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Player.SyncPlayerInfo Token = 1;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // .Player.PlayerMovementInfo Info = 3;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // int32 Content = 2;
  if (this->_internal_content() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_content());
  }

  // int32 ActionData = 4;
  if (this->_internal_actiondata() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actiondata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadCast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadCast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadCast::GetClassData() const { return &_class_data_; }

void BroadCast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BroadCast *>(to)->MergeFrom(
      static_cast<const BroadCast &>(from));
}


void BroadCast::MergeFrom(const BroadCast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Player.BroadCast)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_mutable_token()->::Player::SyncPlayerInfo::MergeFrom(from._internal_token());
  }
  if (from._internal_has_info()) {
    _internal_mutable_info()->::Player::PlayerMovementInfo::MergeFrom(from._internal_info());
  }
  if (from._internal_content() != 0) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_actiondata() != 0) {
    _internal_set_actiondata(from._internal_actiondata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadCast::CopyFrom(const BroadCast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Player.BroadCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCast::IsInitialized() const {
  return true;
}

void BroadCast::InternalSwap(BroadCast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadCast, actiondata_)
      + sizeof(BroadCast::actiondata_)
      - PROTOBUF_FIELD_OFFSET(BroadCast, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadCast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Position_2eproto_getter, &descriptor_table_Position_2eproto_once,
      file_level_metadata_Position_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Player
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Player::SyncPlayerToken* Arena::CreateMaybeMessage< ::Player::SyncPlayerToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::SyncPlayerToken >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::SyncPlayerInfo* Arena::CreateMaybeMessage< ::Player::SyncPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::SyncPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::PlayerChat* Arena::CreateMaybeMessage< ::Player::PlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::PlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::RayIntersect* Arena::CreateMaybeMessage< ::Player::RayIntersect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::RayIntersect >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::Location* Arena::CreateMaybeMessage< ::Player::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::Rotation* Arena::CreateMaybeMessage< ::Player::Rotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::Rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::Scale* Arena::CreateMaybeMessage< ::Player::Scale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::Scale >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::ControllerRotation* Arena::CreateMaybeMessage< ::Player::ControllerRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::ControllerRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::Transform* Arena::CreateMaybeMessage< ::Player::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::Axis* Arena::CreateMaybeMessage< ::Player::Axis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::Axis >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::PlayerMovementInfo* Arena::CreateMaybeMessage< ::Player::PlayerMovementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::PlayerMovementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Player::BroadCast* Arena::CreateMaybeMessage< ::Player::BroadCast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Player::BroadCast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
